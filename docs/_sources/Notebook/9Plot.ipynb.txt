{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "17076669-aee3-4251-885a-0b8009fb3ba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f628e1e-48ab-4828-9fea-de057153b7a1",
   "metadata": {},
   "source": [
    "Make a plot of the curve which is defined by\n",
    "$$\n",
    "x = 2\\cos \\theta + \\cos 2\\theta\n",
    "$$\n",
    "$$\n",
    "y = 2\\sin \\theta - \\sin 2\\theta\n",
    "$$\n",
    "Where $0 \\ge \\theta \\le 2\\pi$ . Take a set of values of $\\theta$ between $0$ and $2\\pi$, calculate $x$ and $y$ for each from the equations above, and then, plot $y$ as a function $x$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ec6dc01-386c-41ab-8b3c-fcbd177f4d1d",
   "metadata": {},
   "source": [
    "## Algorithm: Plot a Parametric Curve\n",
    "\n",
    "### **Steps:**\n",
    "\n",
    "1. **Define the Range for Î¸**\n",
    "   - Generate 100 values for \\( \\theta \\) from 0 to \\( 2\\pi \\) using `numpy.linspace`.\n",
    "\n",
    "2. **Compute the x and y Coordinates**\n",
    "   - Use the given parametric equations:\n",
    "     \\[ x = 2 \\cos \\theta + \\cos 2\\theta \\]\n",
    "     \\[ y = 2 \\sin \\theta - \\sin 2\\theta \\]\n",
    "   - Compute the values for \\( x \\) and \\( y \\) using `numpy.cos()` and `numpy.sin()` functions.\n",
    "\n",
    "3. **Plot the Curve**\n",
    "   - Use `matplotlib.pyplot.plot()` to plot \\( y \\) as a function of \\( x \\).\n",
    "   - Set the color of the curve to red and use a dashed linestyle.\n",
    "\n",
    "4. **Label the Axes**\n",
    "   - Set the x-axis label to \"x\" and the y-axis label to \"y\" with a font size of 12.\n",
    "\n",
    "5. **Set the Title**\n",
    "   - Add the title \"Plot of y as a function of x\" with a font size of 16.\n",
    "\n",
    "6. **Display the Plot**\n",
    "   - Use `plt.show()` to render the plot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27a02ee7-35b9-462a-a7bb-fc5a2c06b02a",
   "metadata": {},
   "source": [
    "## Flowchart"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9a5f9e9-0e56-407c-9f23-582df6355c47",
   "metadata": {},
   "source": [
    "```mermaid\n",
    "flowchart TD;\n",
    "    A[Start] --> B[Generate theta values using linspace];\n",
    "    B --> C[Compute x = 2 * costheta + cos2 * theta];\n",
    "    C --> D[Compute y = 2 * sin theta + sin 2 * theta];\n",
    "    D --> E[Plot x vs y with red dashed line];\n",
    "    E --> F[Set x-axis label];\n",
    "    F --> G[Set y-axis label];\n",
    "    G --> H[Set plot title];\n",
    "    H --> I[Display the plot];\n",
    "    I --> J[End];\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f7013c7b-c75f-4e97-b75d-31eca5cf62d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "theta = np.linspace(0, 2*np.pi, 100)\n",
    "\n",
    "x = 2*np.cos(theta) + np.cos(2*theta)\n",
    "y = 2*np.sin(theta) + np.sin(2*theta)\n",
    "\n",
    "plt.plot(x, y, color=\"red\", linestyle=\"dashed\")\n",
    "plt.xlabel(\"x\", fontsize=12)\n",
    "plt.ylabel(\"y\", fontsize=12)\n",
    "plt.title(\"Plot of y as a function x\", fontsize=16)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
